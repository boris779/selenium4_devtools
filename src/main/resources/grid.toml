#Configuration help for Toml config file
#In case of parsing errors, validate the config using https://www.toml-lint.com/
#Refer https://toml.io/en/ for TOML usage guidance

[server]
# Whether the Selenium server should allow web browser connections from any host
# Type: boolean
# Default: false
# Example: 
allow-cors = false


# Whether the server should bind to the host address/name, or only use it to report its reachable url. Helpful in complex network topologies where the server cannot report itself with the current IP/hostname but rather an external IP or hostname (e.g. inside a Docker container).
# Type: boolean
# Default: true
# Example: 
bind-host = true


# Server IP or hostname: usually determined automatically.
# Type: string
# Example: 
host = "localhost"


# Server certificate for https. Get more detailed information by running "java -jar selenium-server.jar info security"
# Type: path
# Example: 
#https-certificate = "/path/to/cert.pem"


# Private key for https. Get more detailed information by running "java -jar selenium-server.jar info security"
# Type: path
# Example: 
#https-private-key = "/path/to/key.pkcs8"


# Maximum number of listener threads. Default value is: (available processors) * 3.
# Type: int
# Default: 36
# Example: 
#max-threads = 36


# Port to listen on. There is no default as this parameter is used by different components, for example Router/Hub/Standalone will use 4444 and Node will use 5555.
# Type: integer
# Example: 
#port = 5555


# Node registration secret
# Type: string
# Example: 
#registration-secret = "Hunter2"


[node]
# Autodetect which drivers are available on the current system, and add them to the Node.
# Type: boolean
# Default: true
# Example: 
detect-drivers = true


# List of configured drivers a Node supports. It is recommended to provide this type of configuration through a toml config file to improve readability. Command line example: --drivers-configuration display-name="Firefox Nightly" max-sessions=2 webdriver-path="/usr/local/bin/geckodriver" stereotype='{"browserName": "firefox", "browserVersion": "86", "moz:firefoxOptions": {"binary":"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin"}}'
# Type: list of strings
# Example: 
[[node.driver-configuration]]
display-name = "Firefox Nightly"
webdriver-executable = "/usr/local/bin/geckodriver"
max-sessions = 2
stereotype = "{"browserName": "firefox", "browserVersion": "86", "moz:firefoxOptions": {"binary":"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin"}}"


# Mapping of fully qualified class name to a browser configuration that this matches against. --driver-factory org.openqa.selenium.example.LynxDriverFactory '{"browserName": "lynx"}'
# Type: list of strings
# Example: 
driver-factories = ["org.openqa.selenium.example.LynxDriverFactory '{"browserName": "lynx"}']


# Drivers that should be checked. If specified, will skip autoconfiguration. Example: -I "firefox" -I "chrome"
# Type: list of strings
# Default: []
# Example: 
driver-implementation = ["firefox", "chrome"]


# Public URL of the Grid as a whole (typically the address of the Hub or the Router)
# Type: string
# Example: 
grid-url = "https://grid.example.com"


# How often, in seconds, will the Node send heartbeat events to the Distributor to inform it that the Node is up.
# Type: int
# Default: 60
# Example: 
heartbeat-period = 60


# The address of the Hub in a Hub-and-Node configuration. This can be a plain hostname or IP address (`hostname`), in which case the Hub will be assumed to be `http://hostname:4444`, the `--grid-url` will be the same, `--publish-events` will be `tcp://hostname:4442` and `--subscribe-events` will be `tcp://hostname:4443`. If `hostname` contains a port number, that will be used for `--grid-url` but the URIs for the event bus will remain the same. Any of these default values may be overridden but setting the correct flags. If the hostname has  a protocol (such as `https`) that will be used too.
# Type: string
# Example: 
hub = "http://0.0.0.0:4444"


# Maximum number of concurrent sessions. Default value is the number of available processors.
# Type: int
# Default: 12
# Example: 
max-sessions = 12


# The # of available processors is the recommended max sessions value (1 browser session per processor). Setting this flag to true allows the recommended max value to be overwritten. Session stability and reliability might suffer as the host could run out of resources.
# Type: boolean
# Default: false
# Example: 
override-max-sessions = false


# How often, in seconds, the Node will try to register itself for the first time to the Distributor.
# Type: int
# Default: 10
# Example: 
register-cycle = 10


# How long, in seconds, will the Node try to register to the Distributor for the first time. After this period is completed, the Node will not attempt to register again.
# Type: int
# Default: 120
# Example: 
register-period = 120


# Let X be the session-timeout in seconds. The Node will automatically kill a session that has not had any activity in the last X seconds. This will release the slot for other tests.
# Type: int
# Default: 300
# Example: 
session-timeout = 300


[relay]
# Configuration for the service where calls will be relayed to. It is recommended to provide this type of configuration through a toml config file to improve readability. Command line example: --service-configuration max-sessions=2 stereotype='{"browserName": "safari", "platformName": "iOS", "appium:platformVersion": "14.5"}}'
# Type: list of strings
# Example: 
[[relay.configs]]
max-sessions = 2
stereotype = "{"browserName": "safari", "platformName": "iOS", "appium:platformVersion": "14.5" }}"


# Host name where the service that supports WebDriver commands is running
# Type: string
# Example: 
host = "localhost"


# Port where the service that supports WebDriver commands is running
# Type: integer
# Example: 
port = 4723


# Endpoint to query the WebDriver service status, an HTTP 200 response is expected
# Type: string
# Example: 
status-endpoint = "/status"


# URL for connecting to the service that supports WebDriver commands, like an Appium server or a cloud service.
# Type: string
# Example: 
url = http://localhost:4723


[logging]
# Enable http logging. Tracing should be enabled to log http logs.
# Type: boolean
# Default: false
# Example: 
http-logs = false


# Log encoding
# Type: string
# Example: 
log-encoding = UTF-8


# File to write out logs. Ensure the file path is compatible with the operating system's file path.
Windows path example : \\path\to\file\gridlog.log OR C:\path\path\to\file\gridlog.log 
Linux/Unix/MacOS path example : /path/to/file/gridlog.log 

# Type: string
# Example: 
log-file = '\\path\to\file\gridlog.log'

# Example: 
log-file = 'C:\path\path\to\file\gridlog.log'

# Example: 
log-file = '/path/to/file/gridlog.log'


# Log level. Default logging level is INFO. Log levels are described here https://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html
# Type: string
# Default: INFO
# Example: 
log-level = "INFO"


# Use plain log lines
# Type: boolean
# Default: true
# Example: 
plain-logs = true


# Use structured logs
# Type: boolean
# Default: false
# Example: 
structured-logs = false


# Enable trace collection
# Type: boolean
# Default: true
# Example: 
tracing = true


[events]
# Whether the connection string should be bound or connected. When true, the component will be bound to the Event Bus (as in the Event Bus will also be started by the component, typically by the Distributor and the Hub). When false, the component will connect to the Event Bus.
# Type: boolean
# Example: 
bind = false


# Full classname of non-default event bus implementation
# Type: string
# Example: 
implementation = org.openqa.selenium.events.zeromq.ZeroMqEventBus


# Connection string for publishing events to the event bus
# Type: string
# Example: 
publish = "tcp://*:1233"


# Connection string for subscribing to events from the event bus
# Type: string
# Example: 
subscribe = "tcp://*1232"


[docker]
# Absolute path where assets will be stored
# Type: string
# Example: 
assets-path = /opt/selenium/assets


# Docker configs which map image name to stereotype capabilities (example `-D selenium/standalone-firefox:latest '{"browserName": "firefox"}'`)
# Type: list of strings
# Example: 
configs = ["selenium/standalone-firefox:latest", "{\"browserName\": \"firefox\"}"]


# Host name where the docker daemon is running
# Type: string
# Example: 
host = "localhost"


# Port where the docker daemon is running
# Type: integer
# Example: 
port = 2375


# URL for connecting to the docker daemon
# Type: string
# Example: 
url = unix:/var/run/docker.sock


# Docker image to be used when video recording is enabled
# Type: string
# Default: selenium/video:latest
# Example: 
video-image = "selenium/video:latest"


